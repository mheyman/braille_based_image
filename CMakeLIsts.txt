cmake_minimum_required(VERSION 3.21)
project(braille LANGUAGES CXX)

# Let CMake know vcpkg is being used (optional if using toolchain file)
if(DEFINED ENV{VCPKG_ROOT})
    set(CMAKE_TOOLCHAIN_FILE "$ENV{VCPKG_ROOT}/scripts/buildsystems/vcpkg.cmake"
        CACHE STRING "Vcpkg toolchain file")
endif()

find_package(CImg CONFIG REQUIRED)
find_package(fmt CONFIG REQUIRED)
find_package(PNG REQUIRED)
find_package(utf8cpp CONFIG REQUIRED)

include_directories(include)

add_executable(braille_test src/main.cpp)
target_compile_features(braille_test PUBLIC cxx_std_23)

target_compile_options(braille_test PRIVATE "$<$<C_COMPILER_FRONTEND_VARIANT:MSVC>:/utf-8>")
target_compile_options(braille_test PRIVATE "$<$<CXX_COMPILER_FRONTEND_VARIANT:MSVC>:/utf-8>")
target_compile_options(
	braille_test
	INTERFACE
		$<$<OR:$<CXX_COMPILER_FRONTEND_VARIANT:Clang>,$<CXX_COMPILER_FRONTEND_VARIANT:AppleClang>>:-g -Werror -Wall -Wextra -Wshadow  -Wnon-virtual-dtor -Wold-style-cast  -Wcast-align  -Wunused  -Woverloaded-virtual  -Wpedantic  -Wconversion  -Wsign-conversion  -Wnull-dereference  -Wdouble-promotion  -Wformat=2  -Wimplicit-fallthrough -Wno-c++17-compat -Wno-c++17-compat-pedantic -Wno-c++98-compat -Wno-c++98-compat-pedantic>
		$<$<CXX_COMPILER_FRONTEND_VARIANT:GNU>:-g -Werror -Wall -Wextra -Wshadow  -Wnon-virtual-dtor -Wold-style-cast  -Wcast-align  -Wunused  -Woverloaded-virtual  -Wpedantic  -Wconversion  -Wsign-conversion  -Wnull-dereference  -Wdouble-promotion  -Wformat=2  -Wimplicit-fallthrough -Wmisleading-indentation -Wduplicated-cond -Wduplicated-branches -Wlogical-op -Wuseless-cast -Wsuggest-override>
		$<$<CXX_COMPILER_FRONTEND_VARIANT:MSVC>:/WX /W4 /w14242 /w14254 /w14263 /w14265 /w14287 /we4289 /w14296 /w14311 /w14545 /w14546 /w14547 /w14549 /w14555 /w14619 /w14640 /w14826 /w14905  /w14906  /w14928  /permissive->
)
target_compile_options(
	braille_test
	INTERFACE
		$<$<CXX_COMPILER_ID:MSVC>:/Zc:externC-> # clang-cl doesn't have this but it is needed for MSVC
)
target_compile_options(
	braille_test
	INTERFACE
		$<$<OR:$<CXX_COMPILER_FRONTEND_VARIANT:Clang>,$<CXX_COMPILER_FRONTEND_VARIANT:AppleClang>,$<$<CXX_COMPILER_FRONTEND_VARIANT:GNU>>:-fstack-protector-strong -fcf-protection -fstack-clash-protection -fsanitize=undefined -fsanitize-minimal-runtime -fno-sanitize-recover=undefined>
		$<$<CXX_COMPILER_FRONTEND_VARIANT:MSVC>:/sdl /DYNAMICBASE /guard:cf>
)
target_compile_definitions(
	braille_test
	INTERFACE
		$<$<OR:$<CXX_COMPILER_FRONTEND_VARIANT:Clang>,$<CXX_COMPILER_FRONTEND_VARIANT:AppleClang>,$<$<CXX_COMPILER_FRONTEND_VARIANT:GNU>>:D_GLIBCXX_ASSERTIONS>
		$<$<CXX_COMPILER_FRONTEND_VARIANT:MSVC>:>
)
target_link_options(
	braille_test
	INTERFACE
		$<$<OR:$<CXX_COMPILER_FRONTEND_VARIANT:Clang>,$<CXX_COMPILER_FRONTEND_VARIANT:AppleClang>,$<$<CXX_COMPILER_FRONTEND_VARIANT:GNU>>:-fstack-protector-strong -fcf-protection -fstack-clash-protection -fsanitize=undefined -fsanitize-minimal-runtime -fno-sanitize-recover=undefined>
		$<$<CXX_COMPILER_FRONTEND_VARIANT:MSVC>:/NXCOMPAT /CETCOMPAT>
)
target_include_directories(braille_test PUBLIC
		$<BUILD_INTERFACE:${CMAKE_SOURCE_DIR}/include>
		$<INSTALL_INTERFACE:${CMAKE_INSTALL_INCLUDEDIR}>
)
target_link_libraries(braille_test PRIVATE fmt::fmt utf8cpp::utf8cpp CImg::CImg PNG::PNG)

add_custom_target(copy_assets ALL
    COMMAND ${CMAKE_COMMAND} -E copy_if_different
            "${CMAKE_SOURCE_DIR}/src/obama.png"
            "$<TARGET_FILE_DIR:braille_test>/obama.png"
    DEPENDS braille_test "${CMAKE_SOURCE_DIR}/src/obama.png"
    COMMENT "Copying obama.png to the output directory"
)
